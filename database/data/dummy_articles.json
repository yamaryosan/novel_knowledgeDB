[
    {
        "title": "The GET method is not supported for this routeの原因",
        "summary": "",
        "detail": "原因は、画面表示のためのアクションメソッドをPOSTメソッドにしているためである。\n画面表示を行う場合は、ルーティングではGETメソッドにする必要がある。POSTメソッドはフォーム送信のためのメソッドなので、使えない。",
        "created_at": "2019-01-01 00:00:00",
        "updated_at": "2019-01-01 00:00:00"
    },

    {
        "title": "インターフェースの定義方法",
        "summary": "",
        "detail": "今まで見てきた依存性注入の結合は密結合であった。\nつまり、特定のサービスクラスのインスタンスを自動、あるいは手動で組み込み、それ以外のクラスが使えないようにしていた。\nこれはこれで便利だが、後でサービスクラスを変更する事態になったとき、かなり大変である。\nなぜなら、サービスを利用するすべてのシーンで、使用クラスを書き換える羽目になるからだ。\nサービスは開発中、あるいはリリース後は、臨機応変に変化する。\nたとえば内部処理をアップデートしたり、バージョンを2つ用意して、どちらが使いやすいか比べたりしたい。\nこういうとき、クラス変更のたびにシステム全体を書き換えるのは非効率である。\nそこで「インターフェース」を使う。\nインターフェースは、クラスが実装すべきメソッドのみを定義した構造である。\n具体的な実装はインターフェースには含まない。どんなメソッドがあるか、のみを定義する。\nこれによって疎結合を達成し、コードの拡張性や柔軟性を上げる。",
        "created_at": "2019-01-01 00:00:00",
        "updated_at": "2019-01-01 00:00:00"
    }
]
